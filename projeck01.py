import streamlit as st
import ollama  # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Ollama API
import time # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
import json # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó

class ChatbotBackend:
    def __init__(self, model_name): # ‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backend ‡∏Ç‡∏≠‡∏á chatbot
        self.model_name = model_name # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö

    def get_response(self, user_message, selected_topic):
        try:
            response_container = st.empty() # ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            full_response = ""  #‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö


            messages = [  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
                {'role': 'user', 'content': user_message},
                {'role': 'system', 'contents': "You are an assistant. Speak only English and Thai."},
                {'role': 'system', 'contents': "Don't speak LaTeX."},
                {'role': 'system', 'contents': "Don't speak Chinese."}
            ]

            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...'):
                # ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Ollama API ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö stream
             for chunk in ollama.chat(model=self.model_name, messages=messages, stream=True):
                full_response += chunk["message"]["content"]
                response_container.markdown(     # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    f'<div class="message-wrapper assistant-wrapper">'
                    f'<img src="{st.session_state.bot_avatar}" class="avatar">'
                    f'<div class="chat-bubble assistant-message">{full_response}</div></div>',
                    unsafe_allow_html=True
                )

            return full_response
        except Exception as e:
            return f"Error: {str(e)}"


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
def save_history_to_json():
    if "history" not in st.session_state:
        st.session_state.history = []  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á‡πÜ

    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
    with open("history.json", "w") as f:
        json.dump(st.session_state.history, f)


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
def load_history_from_json():
    try:
        with open("history.json", "r") as f:
            st.session_state.history = json.load(f)
    except FileNotFoundError:
        st.session_state.history = []  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡πá‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á

st.set_page_config(page_title="Meta inbox", page_icon="https://cdn.discordapp.com/attachments/888438876480356376/1346467985237213224/download.jpg?ex=67c84b87&is=67c6fa07&hm=0915cb0fb5ecfff66492f67b5622a7d042b6583c4248c0ef3c6d8019c04f7355&")

# ‡πÅ‡∏™‡∏î‡∏á Sidebar
with st.sidebar:
    st.markdown("""
        <style>
            .sidebar-title {
                font-size: 30px; /* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ Home */
                font-weight: bold;
                color: white;
            }
        </style>
    """, unsafe_allow_html=True)

    st.markdown('<div class="sidebar-title">Home</div>', unsafe_allow_html=True)
    st.image(    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô Sidebar
        "https://cdn.discordapp.com/attachments/888438876480356376/1346807975209336914/image.png?ex=67cad9ab&is=67c9882b&hm=5b404b161e6809388fa9a28610629c9f84c22adec4eb6748c4ce40a410e0817f&",
        use_container_width=True)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_name = st.text_input("Set a username", value=st.session_state.get("user_name", "user"), max_chars=20)
    st.session_state.user_name = user_name

    # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    uploaded_avatar = st.file_uploader("Choose a profile picture", type=["jpg", "jpeg", "png"])

    if uploaded_avatar:
        st.session_state.user_avatar = uploaded_avatar
    elif 'user_avatar' not in st.session_state:
        # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default
        st.session_state.user_avatar = "https://cdn.discordapp.com/attachments/888438876480356376/1346426109344092200/bot.jpg?ex=67cac787&is=67c97607&hm=d50dd2ed13dec78e59e177e11dff8b0419af65f6c1b9b35db814931425caeddd&"

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    topic = st.selectbox("Choose a topic (to get better answers)", ["Technology", "Sports", "Movies", "General"])
    st.session_state.selected_topic = topic

    load_history_from_json()    # ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON

    # ‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
    history_css = """
        <style>
            .history-container {
                background-color: #2a2a2a;
                border: 2px solid #4d4d4d;
                padding: 15px;
                border-radius: 10px;
                max-height: 300px;
                overflow-y: auto;
            }
            .history-title {
                font-size: 24px;
                font-weight: bold;
                color: white;
                margin-bottom: 10px;
            }
            .history-item {
                background-color: #3e3e3e;
                color: white;
                padding: 10px;
                margin-bottom: 5px;
                border-radius: 5px;
                font-size: 16px;
                display: flex;
                align-items: center;
            }
            .history-item a {
                color: lightblue;
                text-decoration: none;
            }
            .history-item a:hover {
                text-decoration: underline;
            }
            .history-icon {
                width: 20px;
                height: 20px;
                margin-right: 10px;
            }
        </style>
    """

    st.markdown(history_css, unsafe_allow_html=True)

    st.markdown('<div class="history-title">üì© History</div>', unsafe_allow_html=True)  # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ History


    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏ä‡∏ó
    history_html = ""
    for i, msg in enumerate(st.session_state.history):
        history_html += f"""
            <div class="history-item">
                <img src="https://cdn.discordapp.com/attachments/849108734768316456/1346891153676697700/FB_IMG_1737828589545.jpg?ex=67c9d5a3&is=67c88423&hm=eba52d0e11af45cefa516e9295cbcd657b0b2e8bd1b2ff699b21b0f3aa4cbdaf&" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px;"  />
                <a href='#{i}'>{msg}</a>
            </div>
        """

    st.markdown(history_html, unsafe_allow_html=True) # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
    st.markdown('</div>', unsafe_allow_html=True)



#‡∏õ‡∏£‡∏±‡∏ö Sidebar ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    sidebar_css = """
            <style>
                [data-testid="stSidebar"] {
                    background-color: #181818;
                    border-right: 2px solid #333;
                    padding: 15px;
                }
                .stRadio > label {
                    font-weight: bold;
                    color: white;
                }
                .stMarkdown {
                    font-size: 16px;
                    font-weight: bold;
                    color: white;
                }
            </style>
        """
    st.markdown(sidebar_css, unsafe_allow_html=True)

if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'title_shown' not in st.session_state:
    st.session_state.title_shown = True

if 'user_avatar' not in st.session_state:
    st.session_state.user_avatar = "https://cdn.discordapp.com/attachments/888438876480356376/1346426109344092200/bot.jpg?ex=67cac787&is=67c97607&hm=d50dd2ed13dec78e59e177e11dff8b0419af65f6c1b9b35db814931425caeddd&"

if 'bot_avatar' not in st.session_state:
    st.session_state.bot_avatar = "https://cdn.discordapp.com/attachments/888438876480356376/1346426140989984788/user.jpg?ex=67cac78f&is=67c9760f&hm=9f87b20c8ae5c2866a8d3257b4684ff5c7f87aca91323407c6f5d36f990c1fae&"

title_placeholder = st.empty()

if st.session_state.title_shown:
    title_placeholder.markdown(
        """
        <h1 style="text-align: center; color: #6A6AC7;">Bot Meta Inbox</h1>
        """,
        unsafe_allow_html=True
    )

st.markdown("""
    <style>
        .chat-container {
            max-width: 600px;
            margin: auto;
            display: flex;
            flex-direction: column;
        }
        .chat-bubble {
            padding: 10px 15px;
            border-radius: 20px;
            margin-bottom: 10px;
            max-width: 80%;
            word-wrap: break-word;
            display: inline-block;
        }
        .user-message {
            background-color: #0084ff;
            color: white;
            align-self: flex-end;
            text-align: right;
        }
        .assistant-message {
            background-color: #e4e6eb;
            color: black;
            align-self: flex-start;
            text-align: left;
        }
        .message-wrapper {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        .user-wrapper {
            flex-direction: row-reverse;
        }
        .assistant-wrapper {
            flex-direction: row;
        }
        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin: 5px;
        }
         
    </style>
""", unsafe_allow_html=True)

chatbot = ChatbotBackend(model_name="phi3")

 #‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó (‡∏û‡∏£‡πâ‡∏≠‡∏° ID)
st.markdown('<div class="chat-container">', unsafe_allow_html=True)
for i, message in enumerate(st.session_state.messages):
    role_class = "user-message" if message['role'] == 'user' else "assistant-message"
    wrapper_class = "user-wrapper" if message['role'] == 'user' else "assistant-wrapper"
    avatar_url = st.session_state.user_avatar if message['role'] == 'user' else st.session_state.bot_avatar

    avatar_url = st.session_state.user_avatar if message['role'] == 'user' else st.session_state.bot_avatar

    st.markdown(
        f'<div id="{i}" class="message-wrapper {wrapper_class}"><img src="{avatar_url}" class="avatar"><div class="chat-bubble {role_class}">{message["content"]}</div></div>',
        unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

user_message = st.chat_input("Type something...") # ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
if user_message:
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    st.session_state.history.append(user_message)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
    save_history_to_json()

    title_placeholder.empty()
    st.session_state.title_shown = False

    st.session_state.messages.append({'role': 'user', 'content': user_message})
    st.markdown(
        f'<div class="message-wrapper user-wrapper"><img src="{st.session_state.user_avatar}" class="avatar"><div class="chat-bubble user-message">{user_message}</div></div>',
        unsafe_allow_html=True)

    time.sleep(2)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    typing_placeholder = st.empty()    # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó
    answer = chatbot.get_response(user_message, st.session_state.selected_topic)   # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ chatbot ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    st.session_state.messages.append({'role': 'assistant', 'content': answer})    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏•‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó
    typing_placeholder.empty()   # ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå




